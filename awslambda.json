{
    "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "Launch Network Stack - CSYE 6225 Spring 2020",
        "Metadata": {
    
        },
        "Parameters": {
            "VPCCidrBlock" : {
                "Type" : "String",
                "Description" : "Please enter CIDR block range for VPC : "
            },
            "MyVPCName" : {
                "Type" : "String"
            },
            "Subnet1CIDR" : {
                "Type" : "String",
                "Description" : "Please enter CIDR block range for Subnet 1 : "
            },
            "Subnet2CIDR" : {
                "Type" : "String",
                "Description" : "Please enter CIDR block range for Subnet 2 : "
            },
            "Subnet3CIDR" : {
                "Type" : "String",
                "Description" : "Please enter CIDR block range for Subnet 3 : "
            },
            "InstanceTypeEC2": {
              "Type": "String",
              "AllowedValues": [
                  "t2.micro",
                  "m1.small"
              ]
          },
          "KeyNameForSSH": {
              "Type": "String"
          },
          "AMIId": {
              "Type": "String"
          },
          "myDBInstanceIdentifier": {
              "Type": "String"
          },
          "myEngine": {
              "Type": "String"
          },
          "myDBInstanceClass": {
              "Type": "String"
          },
          "myDBAllocatedStorage": {
              "Type": "Number",
              "Description": "The size of the database (GiB)"
          },
          "myDBName": {
              "Type": "String"
          },
          "myDatabaseUsername": {
              "Type": "String"
          },
          "myDatabasePassword": {
              "Type": "String",
              "NoEcho": true
          },
          "myPublicAccessibiltiyRDS":{
            "Type":"String",
            "AllowedValues": [
              "yes",
              "no"
            ]
          },

        "MyprivateS3": {
            "Type": "String"
        },
        "CircleCIUser": {
            "Type": "String"
        },
        "CodeDeployAppName": {
            "Type": "String"
        },
        "myapplicationSecurityGroup" : {
          "Type":"String"
        },
        "mydatabaseSecurityGroup" : {
          "Type":"String"
        },
        "myWebAppEC2S3Policy" : {
          "Type":"String"
        },
        "myEC2InstanceCSYE6225Role" : {
          "Type":"String"
        },
        "myCodeDeployEC2ServiceRole": {
          "Type":"String"
        },
        "myCodeDeployServiceRole": {
          "Type":"String"
        },
        "myCodeDeployEC2S3": {
          "Type":"String"
        },
        "myCircleCIUploadToS3" :  {
          "Type":"String"
        },
        "myCircleCICodeDeploy" : {
          "Type":"String"
        },
        "myComputePlatformServer": {
          "Type":"String"
        },
        "mycsye6225webappdeployment": {
          "Type":"String"
        },
        "myDeploymentType":{
          "Type":"String"
        },
        "myDeploymentOption" : {
          "Type":"String"
        },
        "myDeploymentConfigName": {
          "Type":"String"
        },
        "myCodeDeployServiceRoleInstanceProfile": {
          "Type":"String"
        },
        "myHostedZoneName": {
          "Type": "String"
      },
        "domainName": {
          "Type": "String"
      },
      "myLoadBalancerSecurityGroup" :{
        "Type": "String"
      },
      "SNSTopicName":{
        "Type":"String"
    },
    "LambdaS3BucketName":{
      "Type":"String"
    },
    "DomainNameEmail":{
      "Type":"String"
    },
    "LambdaExecutionRoleName":{
      "Type":"String"
    },
    "LambdaDeployS3PolicyName":{
      "Type":"String"
    }
      },
        "Mappings": {
    
        },
        "Conditions": {
          "DatabaseRdsPublicAccess" : {"Fn::Equals" : [{"Ref" : "myPublicAccessibiltiyRDS"}, "yes"]}
        },
        "Resources": {
            
            "myVPC": {
              "Type": "AWS::EC2::VPC",
              "Properties": {
                "CidrBlock": {"Ref":"VPCCidrBlock"},
                "InstanceTenancy" : "default",
                "Tags" : [ {"Key" : "Name", "Value" : {"Ref":"MyVPCName"}} ]
              }
            },
            
            "myPublicSubnet1": {
              "Type": "AWS::EC2::Subnet",
              "Properties": {
                "VpcId": {"Ref" : "myVPC"},
                "CidrBlock": {"Ref":"Subnet1CIDR"},
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "0", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "Tags" : [ {"Key" : "Name", "Value" : "publicSubnet1"} ]
              }
            },
            
            "myPublicSubnet2": {
              "Type": "AWS::EC2::Subnet",
              "Properties": {
                "VpcId": {"Ref" : "myVPC"},
                "CidrBlock": {"Ref":"Subnet2CIDR"},
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "1", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "Tags" : [ {"Key" : "Name", "Value" : "publicSubnet2"} ]
              }
            },
            
            "myPublicSubnet3": {
              "Type": "AWS::EC2::Subnet",
              "Properties": {
                "VpcId": {"Ref" : "myVPC"},
                "CidrBlock": {"Ref":"Subnet3CIDR"},
                "AvailabilityZone" : {
                    "Fn::Select" : [ 
                      "2", 
                      { 
                        "Fn::GetAZs" : "" 
                      } 
                    ]
                  },
                "Tags" : [ {"Key" : "Name", "Value" : "publicSubnet3"} ]
              }
            },
            
            
            "myInternetGateway": {
              "Type": "AWS::EC2::InternetGateway",
              "Properties": {
                "Tags" : [ {"Key" : "Name", "Value" : "InternetGateway-6255"} ]
              }
            },
            "AttachGateway": {
              "Type": "AWS::EC2::VPCGatewayAttachment",
              "Properties": {
                "VpcId": {"Ref" : "myVPC"},
                "InternetGatewayId": { "Ref": "myInternetGateway" }
              }
            },
            
            "myRouteTable": {
              "Type": "AWS::EC2::RouteTable",
              "Properties": {
                "VpcId": {"Ref" : "myVPC"},
                "Tags" : [ {"Key" : "Name", "Value" : "RouteTable-6255"} ]
              }
            },
          
            "mySubnetRouteTableAssociation1": {
              "Type": "AWS::EC2::SubnetRouteTableAssociation",
              "Properties": {
                "SubnetId": {"Ref" : "myPublicSubnet1"},
                "RouteTableId": { "Ref": "myRouteTable" }
              }
            },
            "mySubnetRouteTableAssociation2": {
              "Type": "AWS::EC2::SubnetRouteTableAssociation",
              "Properties": {
                "SubnetId": {"Ref" : "myPublicSubnet2"},
                "RouteTableId": { "Ref": "myRouteTable" }
              }
            },
            "mySubnetRouteTableAssociation3": {
              "Type": "AWS::EC2::SubnetRouteTableAssociation",
              "Properties": {
                "SubnetId": {"Ref" : "myPublicSubnet3"},
                "RouteTableId": { "Ref": "myRouteTable" }
              }
            },        
            "myRoute" : {
              "Type" : "AWS::EC2::Route",
              "Properties" : {
                "RouteTableId" : { "Ref" : "myRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "myInternetGateway" }
              }
            },
    
            
            "applicationSecurityGroup" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "GroupName" :  {"Ref" : "myapplicationSecurityGroup"},
                "GroupDescription" : "Creating application security group through cloud formation",
                "Tags" :  [ {"Key" : "Name" , "Value" : "applicationSecurityGroup-csye6225" }],
                "SecurityGroupIngress" : [ 
                  {
                    "IpProtocol" : "tcp",
                    "SourceSecurityGroupId" : {
                      "Ref" : "LoadBalancerSecurityGroup"
                    },
                    "FromPort" : 8080,
                    "ToPort" : 8080
                   }
                ],
                "VpcId": {"Ref" : "myVPC"}
                
              }
            },
            "databaseSecurityGroup" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "GroupName" :  {"Ref" : "mydatabaseSecurityGroup"},
                "GroupDescription" : "Creating database security group through cloud formation",
                "Tags" :  [ {"Key" : "Name" , "Value" : "databaseSecurityGroup-csye6225" }],
                "SecurityGroupIngress" : [ 
                 {
                    "IpProtocol" : "tcp",
                    "FromPort" : 3306,
                    "ToPort" : 3306,
                    "SourceSecurityGroupId" : {
                      "Ref" : "applicationSecurityGroup"
                    }
                 }
                ],
                "VpcId": {"Ref" : "myVPC"}
                
              }
            },
    
              
              "myS3Bucket": {
                "Type": "AWS::S3::Bucket",
                "DeletionPolicy": "Delete",
                "Properties": {
                  "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": "true",
                    "BlockPublicPolicy": "true",
                    "IgnorePublicAcls": "true",
                    "RestrictPublicBuckets": "true"
                },
                  "LifecycleConfiguration": {
                    "Rules" : [{
                    "Id" : "S3 Transition and Expiration",
                    "Prefix" : "",
                    "Status" : "Enabled",
                    "ExpirationInDays" : "90",
                    "Transitions" : [
                      {
                        "StorageClass" : "STANDARD_IA",
                        "TransitionInDays" : 30
                      }
    
                    ]
                  }
                  ]},
                  "BucketEncryption" : {
                    "ServerSideEncryptionConfiguration" : [ {"ServerSideEncryptionByDefault": {
                      "SSEAlgorithm" : "AES256"
                      } 
                      }] 
                }
              }
            },
            
            "myWebAppS3Policy": {
               "Type": "AWS::IAM::ManagedPolicy",
               "DependsOn" : "myS3Bucket",
               "Properties": {
                "ManagedPolicyName":  {"Ref" : "myWebAppEC2S3Policy"},
                  "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Allow",
                            "Resource": 
                            {
                              "Fn::Join": [
                                  "",
                                  [
                                      "arn:aws:s3:::",
                                      {
                                          "Ref": "myS3Bucket"
                                      },
                                      "/*"
                                  ]
                              ]
                          }
                        }
                    ]
                }
              }
            },
    
            "myEC2CSYE6225Role": {
              "Type": "AWS::IAM::Role",
              "DependsOn": "myWebAppS3Policy",
              "Properties": {
                  "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                      "ec2.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                  },
                  "ManagedPolicyArns": 
                  [
                      {
                          "Ref": "myWebAppS3Policy"
                      }
                  ],
                  "RoleName": {"Ref" : "myEC2InstanceCSYE6225Role"}
              }
          },

          "CodeDeployEC2S3": {
             "Type": "AWS::IAM::ManagedPolicy",
             "Properties": {
                "Groups" : [  ],
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject",
                                "s3:ListObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:aws:s3:::",
                                        {
                                          "Ref": "MyprivateS3"
                                        },
                                        "/*"
                                      ]
                                    ]
                                  }
                              ]
                        }
                    ]
                },
                "ManagedPolicyName" : {"Ref" : "myCodeDeployEC2S3"}
             }
          },
          
          "CircleCIUploadToS3": {
             "Type": "AWS::IAM::Policy",
             "Properties": {
                "Groups" : [  ],
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:aws:s3:::",
                                        {
                                          "Ref": "MyprivateS3"
                                        },
                                        "/*"
                                      ]
                                    ]
                                  }
                            ]
                        }
                    ]
                }
                ,
                "PolicyName" :{"Ref" : "myCircleCIUploadToS3"},
                "Users" : [  
                    {
                    "Ref": "CircleCIUser"
                    }
             ]
             }
          },
          
          "CircleCICodeDeploy": {
             "Type": "AWS::IAM::Policy",
             "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codedeploy:RegisterApplicationRevision",
                      "codedeploy:GetApplicationRevision"
                    ],
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:codedeploy:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":application:",
                          {
                            "Ref": "CodeDeployAppName"
                          }
                        ]
                      ]
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codedeploy:CreateDeployment",
                      "codedeploy:GetDeployment"
                    ],
                    "Resource": [
                      "*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codedeploy:GetDeploymentConfig"
                    ],
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:codedeploy:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":deploymentconfig:CodeDeployDefault.OneAtATime"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:codedeploy:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:codedeploy:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                          ]
                        ]
                      }
                    ]
                  }
                ]
              },
              
                "PolicyName" : {"Ref" : "myCircleCICodeDeploy"},
                "Users" : [  
                    {
                    "Ref": "CircleCIUser"
                    }
                 ]
             }
          },          
          
          "CodeDeployEC2ServiceRole": {
             "Type": "AWS::IAM::Role",
             "Properties": {
                "AssumeRolePolicyDocument": {  
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Principal": {
                          "Service": [
                            "ec2.amazonaws.com"
                          ]
                        },
                        "Action": [
                          "sts:AssumeRole"
                        ]
                      }
                    ] },
                "RoleName":  {"Ref" : "myCodeDeployEC2ServiceRole"},
                "ManagedPolicyArns" :[
                  {
                    "Ref" : "CodeDeployEC2S3"
                  },
                  {
                    "Ref" : "myWebAppS3Policy"
                  },
                  "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                  "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
                  "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
                  "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
                ]
             }
          },
          
          
          "CodeDeployServiceRole": {
             "Type": "AWS::IAM::Role",
             "Properties": {
                "AssumeRolePolicyDocument": {     
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                          "Service": [
                            "codedeploy.amazonaws.com"
                          ]
                        },
                        "Action": "sts:AssumeRole"
                      }
                    ]},
               
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                      ],
                      "RoleName": {"Ref" : "myCodeDeployServiceRole"}
             }
          },
          
    
          "CodeDeployName": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
              "ApplicationName": {
                "Ref": "CodeDeployAppName"
              },
              "ComputePlatform" :  {"Ref" : "myComputePlatformServer"}
            }
          },

          "CodeDeployDeploymentGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
              "ApplicationName": {
                "Ref": "CodeDeployAppName"
              },
              "AutoRollbackConfiguration": {
                "Enabled": "true",
                "Events": [
                  "DEPLOYMENT_FAILURE"
                ]
              },
              "Ec2TagFilters" : [
                {
                 "Key": "Name",
                "Type": "KEY_AND_VALUE",
                "Value": "Production"
                }
              ],
              "DeploymentConfigName": {"Ref" : "myDeploymentConfigName"},
              "DeploymentGroupName": {"Ref" : "mycsye6225webappdeployment"},
              "DeploymentStyle": {
                "DeploymentOption":{"Ref" : "myDeploymentOption"},
                "DeploymentType": {"Ref" : "myDeploymentType"}
              },
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "CodeDeployServiceRole",
                  "Arn"
                ]
              },
              "AutoScalingGroups": [
                {
                    "Ref": "myAutoScalingGroup"
                }
            ],
            "LoadBalancerInfo": {
              "TargetGroupInfoList": [
                  {
                      "Name": {
                          "Fn::GetAtt": [
                              "myLoadBalancerTargetGroup",
                              "TargetGroupName"
                          ]
                      }
                  }
              ]
          }
            }
          },
          
          
          "CodeDeployServiceRoleInstanceProfile": {
             "Type": "AWS::IAM::InstanceProfile",
             "DependsOn": "CodeDeployEC2ServiceRole",
             "Properties": {
                "Path": "/",
                "Roles": [ 
                    {
                    "Ref": "CodeDeployEC2ServiceRole"
                    } 
                ],
                "InstanceProfileName":  {"Ref" : "myCodeDeployServiceRoleInstanceProfile"}
             }
          },
    
        "myRDSInstance": {
          "Type": "AWS::RDS::DBInstance",
          "Properties": {
              "DBInstanceIdentifier": {
                  "Ref": "myDBInstanceIdentifier"
              },
    
              "DBName": {
                  "Ref": "myDBName"
              },
              "DBInstanceClass": {
                  "Ref": "myDBInstanceClass"
              },
              "AllocatedStorage": {
                  "Ref": "myDBAllocatedStorage"
              },
              "Engine":{
                "Ref": "myEngine"},
              
              "MasterUsername": {
    
                  "Ref": "myDatabaseUsername"
              },
              "MasterUserPassword": {
                  "Ref": "myDatabasePassword"
    
              },
              "MultiAZ": false,
              "PubliclyAccessible": { "Fn::If" : [
                "DatabaseRdsPublicAccess",
                true,
                false
              ]},
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "RDS MySQL - CSYE6225"
                  }
              ],
              "VPCSecurityGroups": [
                  {
                      "Ref": "databaseSecurityGroup"
                  }
              ],
              "DBSubnetGroupName": {
                  "Ref": "DBSubnetGroup"
              }
          }
        }
       ,
          
       "DBSubnetGroup": {
        "Type": "AWS::RDS::DBSubnetGroup",
        "Properties": {
            "DBSubnetGroupDescription": "Included two Subnet- PublicSubnetId2, PublicSubnetId3",
            "SubnetIds": [
                {
                    "Ref": "myPublicSubnet2"
                },
                {
                    "Ref": "myPublicSubnet3"
                }
            ],
            "Tags": [{"Key": "Name","Value": "Database SubnetGroup "} ]
        }
    },

    
    "myLaunchConfig":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "LaunchConfigurationName": "asg_launch_config",
        "KeyName": {
          "Ref": "KeyNameForSSH"
      },
      "IamInstanceProfile": {
          "Ref": "CodeDeployServiceRoleInstanceProfile"
      },
        "InstanceType": 
        {
          "Ref": "InstanceTypeEC2"
      },
        "ImageId":{ "Ref": "AMIId" },
        "AssociatePublicIpAddress": "true",
        "BlockDeviceMappings": [
          {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                  "VolumeSize": "20",
                  "VolumeType": "gp2",
                  "DeleteOnTermination": "true"
              }
          }
      ],
      "SecurityGroups": [
        {
          "Ref" : "applicationSecurityGroup"
        }
    ],
        "UserData":{
          "Fn::Base64": 
        {
            "Fn::Join": 
          [
              "\n",
              [ 
                     "#!/bin/bash -xe \n",
                     "sudo chmod +777 /etc/profile",
                     {
                      "Fn::Join": 
                      ["",
                        ["echo ",
                         "'", 
                         "export MYSQL_USERNAME=",
                         "\"",
                         {
                           "Ref": "myDatabaseUsername"
                         },
                         "\"",
                         "'"," >> /etc/profile \n"]
                      ]
                    },
                    {
                      "Fn::Join": 
                      ["",
                        ["echo ",
                         "'", 
                         "export MYSQL_ROOT_PASSWORD=",
                         "\"",
                         {
                           "Ref": "myDatabasePassword"
                         },
                         "\"",
                         "'"," >> /etc/profile \n"]
                      ]
                    },
                    {
                      "Fn::Join": 
                      ["",
                        ["echo ",
                         "'", 
                         "export MYSQL_DATABASE=",
                         "\"",
                         {
                           "Ref": "myDBName"
                         },
                         "\"",
                         "'"," >> /etc/profile \n"]
                      ]
                    },
                     {
                       "Fn::Join": 
                          ["",
                              [ "echo ",
                                "'", 
                                "export MYSQL_HOST=",
                                "\"",
                                {
                                  "Fn::GetAtt": 
                                  ["myRDSInstance","Endpoint.Address"]
                                },
                                "\"",
                                "'"," >> /etc/profile \n" 
                              
                              ]
                          ]
                      },
                      {
                        "Fn::Join": 
                        ["",
                          ["echo ",
                           "'", 
                           "export BucketName=",
                           "\"",
                           {
                             "Ref": "myS3Bucket"
                           },
                           "\"",
                           "'"," >> /etc/profile \n"]
                        ]
                      },
                     "echo 'export MYSQL_DIALECT=\"mysql\"' >> /etc/profile \n",
                     "echo 'export NODE_ENV=\"test\"' >> /etc/profile \n",
                     "echo 'export MYSQL_PORT=\"3306\"' >> /etc/profile \n",
                     "echo 'export spring_profiles_active=\"dev\"' >> /etc/profile \n",
                     "sudo source /etc/profile \n"
               ]
            ]
          }
        }
      }
    },

    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" :  {"Ref" : "myLoadBalancerSecurityGroup"},
        "GroupDescription" : "Creating LoadBalancer security group through cloud formation",
        "Tags" :  [ {"Key" : "Name" , "Value" : "LoadBalancerSecurityGroup-csye6225" }],
        "SecurityGroupIngress" : [ 
         {
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 80,
          "CidrIp": "0.0.0.0/0"
         }
        ],
        "VpcId": {"Ref" : "myVPC"}
      }
    },

    "myAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties":{
        "LaunchConfigurationName": 
        {
          "Ref": "myLaunchConfig"
        },
        "Tags": [
          { 
            "Key": "Environment",
            "Value": "Production",
          "PropagateAtLaunch" : "true"
        }
      ],
        "AutoScalingGroupName":"myASG",
        "Cooldown": "60",
        "MinSize":"2",
        "MaxSize":"5",
        "DesiredCapacity":"2",      
        "VPCZoneIdentifier":[ 
          {"Ref" : "myPublicSubnet1"}
        ],
        "TargetGroupARNs" : [{"Ref" : "myLoadBalancerTargetGroup"} ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
          "AdjustmentType": "ChangeInCapacity",
          "AutoScalingGroupName": {
              "Ref": "myAutoScalingGroup"
          },
          "Cooldown": "60",
          "ScalingAdjustment": "1"
      }
  },
  "WebServerScaleDownPolicy": {
    "Type": "AWS::AutoScaling::ScalingPolicy",
    "Properties": {
      "AdjustmentType": "ChangeInCapacity",
      "AutoScalingGroupName": {
        "Ref": "myAutoScalingGroup"
      },
      "Cooldown": "60",
      "ScalingAdjustment": "-1"
    }
  },
  "CPUAlarmHigh": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "1",
      "Threshold": "5",
      "AlarmActions": [
        {
          "Ref": "WebServerScaleUpPolicy"
        }
      ],
      "Dimensions": [
        {
          "Name": "AutoScalingGroupName",
          "Value": {
            "Ref": "myAutoScalingGroup"
          }
        }
      ],
      "ComparisonOperator": "GreaterThanThreshold"
    }
  },
  "CPUAlarmLow": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "1",
      "Threshold": "3",
      "AlarmActions": [
        {
          "Ref": "WebServerScaleDownPolicy"
        }
      ],
      "Dimensions": [
        {
          "Name": "AutoScalingGroupName",
          "Value": {
            "Ref": "myAutoScalingGroup"
          }
        }
      ],
      "ComparisonOperator": "LessThanThreshold"
    }
  },
 "ApplicationLoadBalancer": {
    "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
    "Properties" : {
        "Name" :  "ApplicationLoadBalancer",
        "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup"}],
        "Subnets" : [ 
           {"Ref" : "myPublicSubnet1"},
          {"Ref" : "myPublicSubnet2"},
          {"Ref" : "myPublicSubnet3"}
         ],
        "Tags" : [
          {
            "Key": "Name",
          "Value": "csye6225-applicationLoadBalancer"
          }],
        "Type" : "application"
      }
  },
  "myLoadBalancerTargetGroup": {
    "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    "Properties": {
          "TargetType": "instance",
          "HealthCheckIntervalSeconds": 30,
          "HealthCheckPort": 8080,
          "UnhealthyThresholdCount": 5,
          "HealthyThresholdCount": 2,
          "HealthCheckPath": "/",
          "Protocol": "HTTP",
          "Port": 8080,
            "Matcher" : {
              "HttpCode" : "200-499"
            },
            "Name" : "AppTargetGroupName",
            "Tags" : [ {
              "Key" : "Name",
              "Value" : "CSYE_6225_ELB_TARGET_GROUP"
            }],
        "VpcId": {
          "Ref" : "myVPC"
        }
    }
},
"myLoadBalancerListener": {
  "Type": "AWS::ElasticLoadBalancingV2::Listener",
  "Properties": {
      "DefaultActions": [
          {
              "Type": "forward",
              "TargetGroupArn":
               {
                  "Ref": "myLoadBalancerTargetGroup"
              }
          }
      ],
      "LoadBalancerArn": 
      {
          "Ref": "ApplicationLoadBalancer"
      },
      "Port": 80,
      "Protocol": "HTTP"
  }
},
"myDnsResourceRecord": {
  "Type": "AWS::Route53::RecordSet",
  "Properties": {
      "AliasTarget": {
          "HostedZoneId": {
              "Fn::GetAtt": [
                  "ApplicationLoadBalancer",
                  "CanonicalHostedZoneID"
              ]
          },
          "DNSName": {
              "Fn::GetAtt": [
                  "ApplicationLoadBalancer",
                  "DNSName"
              ]
          }
      },
      "HostedZoneName": {
          "Ref": "myHostedZoneName"
      },
      "Name": {
          "Ref": "domainName"
      },
      
    
      "Type": "A"
  }
},

"MySNSTopic":{
  "Type" : "AWS::SNS::Topic",
  "Properties" : {
      "DisplayName" : "Bills_Due",
      "Subscription" : [
          {
          "Endpoint" : { "Fn::GetAtt" : [ "MyLambdaFunction","Arn" ] },
          "Protocol" :"lambda"
        }],
      "TopicName" : {"Ref":"SNSTopicName"}
    }
},

"MyLambdaFunction":{
  "Type" : "AWS::Lambda::Function",
  "Properties" : {
      "Code" : {
        "S3Bucket": {"Ref":"LambdaS3BucketName"},
        "S3Key": "index.zip"
    },
      "Environment" : { 
        "Variables" : {"Domain" : { "Ref" :  "DomainNameEmail"}}
      },
      "FunctionName" : "MyLambdaFunction",
      "Handler" : "com.neu.edu.lambda.LogEvent::handleRequest",
      "MemorySize" : 256,
      "Role" : {"Fn::GetAtt":["LambdaExecutionRole","Arn"]},
      "Runtime" : "java8",
      "Timeout" : 180
    }
},

"LambdaDeployS3Policy":{
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
      "ManagedPolicyName": {"Ref":"LambdaDeployS3PolicyName"},
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "s3:GetObject",
              "s3:ListObject"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                  "",
                  [
                      "arn:aws:s3:::",
                      {
                          "Ref": "LambdaS3BucketName"
                      },
                      "/*"
                  ]
              ]
            }
          }                     
        ]
    }
  }
},



"LambdaExecutionRole": {
  "Type": "AWS::IAM::Role",
  "Properties": {
     "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [
                            "lambda.amazonaws.com"
                        ]
                    },
                    "Action": [
                        "sts:AssumeRole"
                    ]
                }
            ]
        },
     "RoleName": {"Ref":"LambdaExecutionRoleName"},
     "ManagedPolicyArns": [
      {
        "Ref": "LambdaDeployS3Policy"
      },
      
        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "arn:aws:iam::aws:policy/AmazonSESFullAccess",
        "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
        "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
        "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
        "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
        "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
        "arn:aws:iam::aws:policy/AWSLambdaExecute"
      
  ]
  }
},

"LambdaPermission":{
"Type" : "AWS::Lambda::Permission",
"Properties" : {
    "Action" : "lambda:InvokeFunction",
    "FunctionName" : {"Ref":"MyLambdaFunction"},
    "Principal" : "sns.amazonaws.com",
    "SourceArn" : {"Ref":"MySNSTopic"}
  }
},

"MyDynamoDBTable":{
"Type" : "AWS::DynamoDB::Table",
"Properties" : {
    "AttributeDefinitions" : [
      {
          "AttributeName": "id",
          "AttributeType": "S"
      }
      
  ],
    "KeySchema" : [
      {
          "AttributeName": "id",
          "KeyType": "HASH"
      }
      
  ],
    "ProvisionedThroughput" :
      {
        "ReadCapacityUnits" : 5,
        "WriteCapacityUnits" : 5
      },
     "TableName" : "csye6225",
    "TimeToLiveSpecification" : {
      "AttributeName": "TTL",
      "Enabled": true
  }
  }
},
"MyQueue": {
  "Type": "AWS::SQS::Queue",
  "Properties": {
    "QueueName": "testqueue"
  }
}







        
        }
    }

